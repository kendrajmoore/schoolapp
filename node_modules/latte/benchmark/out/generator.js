function __IteratorValue(value, done) {
    this.done = done;
    this.value = value;
}
__IteratorValue.done = new __IteratorValue(void 0, true);
function __Generator(me, fn) {
    this.me = me;
    this.fn = fn;
    this.born = false;
    this.closed = false;
}
function __generatorYield(me, v, next) {
    me.fn = next;
    return new __IteratorValue(v, false);
}
function __generatorStop(me, v, next) {
    me.closed = true;
    return __IteratorValue.done;
}
__Generator.prototype = {
    iterator: function () {
        return this;
    },
    next: function () {
        return this.send();
    },
    send: function (v) {
        if (!this.born) {
            this.born = true;
            return this.fn.call(this.me, this);
        }
        if (!this.fn) {
            me.closed = true;
            return __IteratorValue.done;
        }
        return this.fn.call(this.me, null, v);
    },
    'throw': function (e) {
        if (this.closed)
            throw new Error('generator is closed!');
        if (!this.born) {
            throw e;
        }
        return this.fn.call(this.me, e);
    }
};
function __gen(me, fn) {
    return new __Generator(me, fn);
}
var N = 15500;
function sum_rec() {
    function sum(n, a) {
        return n > 0 ? sum(n - 1, n + (a || 0)) : a;
    }
    sum(N);
}
function sum_tco() {
    var sum = recur(function (n, a) {
            return n > 0 ? sum(n - 1, n + (a || 0)) : a;
        });
    sum(N);
    function recur(f) {
        var result, active = false, accumulated = [];
        return function accumulator() {
            accumulated.push(arguments);
            if (!active) {
                active = true;
                while (accumulated.length)
                    result = f.apply(this, accumulated.shift());
                active = false;
                return result;
            }
        };
    }
}
function sum_gen() {
    var sum = rec(function sum_r(n, a) {
            return new __Generator(this, function (__generator) {
                return __generatorYield(__generator, n > 0 ? sum_r(n - 1, n + (a || 0)) : a);
            });
        });
    sum(N);
    function rec(f) {
        var active = false;
        return function () {
            var r = f.apply(this, arguments);
            if (!active) {
                active = true;
                while (r.next) {
                    r = r.next().value;
                }
                active = false;
            }
            return r;
        };
    }
}
module.exports = {
    name: 'Generator',
    tests: {
        'recursion': sum_rec,
        'trampoline': sum_tco,
        'generator': sum_gen
    }
};