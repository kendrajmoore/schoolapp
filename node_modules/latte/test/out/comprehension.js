function __Iterator(v) {
    this.iterator = v.iterator();
}

__Iterator.prototype.hasNext = function() {
    var n = this.iterator.next();

    if (n.done)
        return false;

    this._next = n.value;
    return true;
};

__Iterator.prototype.next = function() {
    return this._next;
};

function __ArrayIterator(v) {
    this.array = v;
    this.index = 0;
}

__ArrayIterator.prototype.hasNext = function() {
    return this.index < this.array.length;
};

__ArrayIterator.prototype.next = function() {
    return this.array[this.index++];
};

function __ObjectIterator(v) {
    this.obj = v;
    this.keysIterator = new __ArrayIterator(Object.keys(v));
}

__ObjectIterator.prototype.hasNext = function() {
    return this.keysIterator.hasNext();
};

__ObjectIterator.prototype.next = function() {
    var k = this.keysIterator.next();
    return [k, this.obj[k]];
};

function __iterator(v) {
    if (typeof v.iterator === "function") {
        return new __Iterator(v);
    }

    if (typeof v === "string" || Object.prototype.toString.call(v) === "[object Array]") {
        return new __ArrayIterator(v);
    }

    return new __ObjectIterator(v);
}

function __IteratorValue(value, done) {
    this.done = done;
    this.value = value;
}

__IteratorValue.done = new __IteratorValue(void 0, true);
var should = require("should");

describe('Array Comprehension', function() {

	it('enumerates an array', function() {
        var a = [10, 20];
        (function() {
            var __comp = [];

            Object.keys(a).forEach(function(i) {
                __comp.push(a[i]);
            });

            return __comp;
        }).call(this).should.eql(a);
    })

	it('enumerates two arrays', function() {
        var a = [10, 20],
			b = [1,2];
        (function() {
            var __comp = [];

            Object.keys(a).forEach(function(i) {
                Object.keys(b).forEach(function(j) {
                    __comp.push(a[i] + b[j]);
                });
            });

            return __comp;
        }).call(this).should.eql([ 11, 12, 21, 22 ]);
    })

	it('filters an array', function() {
        var a = [1, 2, 3, 4, 5, 6];
        var evens = function() {
            var __comp = [];

            Object.keys(a).forEach(function(i) {
                if (a[i] % 2 == 0) {
                    __comp.push(a[i]);
                }
            });

            return __comp;
        }.call(this);
        evens.should.eql([2, 4, 6]);
    })

	it('allows local variables', function() {
        var a = {x: 'a', y: 'b'};

        (function() {
            var __comp = [];

            Object.keys(a).forEach(function(k) {
                var v = a[k];
                __comp.push(k + '=' + v);
            });

            return __comp;
        }).call(this).join(' ')
			.should.equal('x=a y=b');
    })

	it('allows local variables as first statement', function() {
        var a = {x: 'a', y: 'b'};

        (function() {
            var __comp = [];
            var pre = 'Hello ';

            Object.keys(a).forEach(function(k) {
                __comp.push(pre + k);
            });

            return __comp;
        }).call(this).join(', ')
			.should.equal('Hello x, Hello y');
    })

	it('enumerates an array with of', function() {
        var a = [10, 20];
        (function() {
            var __comp = [];
            var __t0 = __iterator(a);

            while (__t0.hasNext()) {
                (function() {
                    var x = __t0.next();
                    __comp.push(x);
                }).call(this);
            }

            return __comp;
        }).call(this).should.eql(a);
    })

	it('enumerates two arrays with of', function() {
        var a = [10, 20],
			b = [1,2];
        (function() {
            var __comp = [];
            var __t1 = __iterator(a);

            while (__t1.hasNext()) {
                (function() {
                    var i = __t1.next();
                    var __t2 = __iterator(b);

                    while (__t2.hasNext()) {
                        (function() {
                            var j = __t2.next();
                            __comp.push(i + j);
                        }).call(this);
                    }
                }).call(this);
            }

            return __comp;
        }).call(this).should.eql([ 11, 12, 21, 22 ]);
    })

	it('uses local variable binding scope', function(done) {
        var a = [10, 20],
			r = 0;
        (function() {
            var __comp = [];
            var __t3 = __iterator(a);

            while (__t3.hasNext()) {
                (function() {
                    var x = __t3.next();

                    __comp.push(process.nextTick(function() {
                        return r += x;
                    }));
                }).call(this);
            }

            return __comp;
        }).call(this);

        process.nextTick(function() {
			r.should.equal(30);
			done();
		});
    })
});