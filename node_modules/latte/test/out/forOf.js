function __Iterator(v) {
    this.iterator = v.iterator();
}

__Iterator.prototype.hasNext = function() {
    var n = this.iterator.next();

    if (n.done)
        return false;

    this._next = n.value;
    return true;
};

__Iterator.prototype.next = function() {
    return this._next;
};

function __ArrayIterator(v) {
    this.array = v;
    this.index = 0;
}

__ArrayIterator.prototype.hasNext = function() {
    return this.index < this.array.length;
};

__ArrayIterator.prototype.next = function() {
    return this.array[this.index++];
};

function __ObjectIterator(v) {
    this.obj = v;
    this.keysIterator = new __ArrayIterator(Object.keys(v));
}

__ObjectIterator.prototype.hasNext = function() {
    return this.keysIterator.hasNext();
};

__ObjectIterator.prototype.next = function() {
    var k = this.keysIterator.next();
    return [k, this.obj[k]];
};

function __iterator(v) {
    if (typeof v.iterator === "function") {
        return new __Iterator(v);
    }

    if (typeof v === "string" || Object.prototype.toString.call(v) === "[object Array]") {
        return new __ArrayIterator(v);
    }

    return new __ObjectIterator(v);
}

function __IteratorValue(value, done) {
    this.done = done;
    this.value = value;
}

__IteratorValue.done = new __IteratorValue(void 0, true);
var should = require("should");

describe('For-of statement', function() {

	it('iterates over arrays', function() {
        var r = "";
        var __t0 = __iterator(['a','b','c']);

        while (__t0.hasNext()) {
            var x = __t0.next();
            r += x;
        }

        r.should.equal("abc");
    })

	it('supports nested loops', function() {
        var r = "";
        var __t1 = __iterator(['a','b','c']);

        while (__t1.hasNext()) {
            var x = __t1.next();
            var __t2 = __iterator(['x','y']);

            while (__t2.hasNext()) {
                var y = __t2.next();
                r += x + y;
            }
        }

        r.should.equal("axaybxbycxcy");
    })

});