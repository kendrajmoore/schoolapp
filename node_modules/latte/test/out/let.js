function __Iterator(v) {
    this.iterator = v.iterator();
}

__Iterator.prototype.hasNext = function() {
    var n = this.iterator.next();

    if (n.done)
        return false;

    this._next = n.value;
    return true;
};

__Iterator.prototype.next = function() {
    return this._next;
};

function __ArrayIterator(v) {
    this.array = v;
    this.index = 0;
}

__ArrayIterator.prototype.hasNext = function() {
    return this.index < this.array.length;
};

__ArrayIterator.prototype.next = function() {
    return this.array[this.index++];
};

function __ObjectIterator(v) {
    this.obj = v;
    this.keysIterator = new __ArrayIterator(Object.keys(v));
}

__ObjectIterator.prototype.hasNext = function() {
    return this.keysIterator.hasNext();
};

__ObjectIterator.prototype.next = function() {
    var k = this.keysIterator.next();
    return [k, this.obj[k]];
};

function __iterator(v) {
    if (typeof v.iterator === "function") {
        return new __Iterator(v);
    }

    if (typeof v === "string" || Object.prototype.toString.call(v) === "[object Array]") {
        return new __ArrayIterator(v);
    }

    return new __ObjectIterator(v);
}

function __IteratorValue(value, done) {
    this.done = done;
    this.value = value;
}

__IteratorValue.done = new __IteratorValue(void 0, true);
var should = require("should");

describe('Let Statement', function() {

	it('defines variables in block scope', function(done) {
        var a = [10, 20],
			r = 0;

        for ( var i in a ) {
            (function() {
                var x = a[i];
                process.nextTick(function() {
                    r += x;
                });
            }).call(this);
        }

        process.nextTick(function() {
			r.should.equal(30);
			done();
		});
    })

	it('works with for (in)', function(done) {
        var a = [10, 20],
			r = 0;

        Object.keys(a).forEach(function(i) {
            process.nextTick(function() {
				r += a[i];
			});
        });

        process.nextTick(function() {
			r.should.equal(30);
			done();
		});
    })

	it('works with for (of)', function(done) {
        var a = [10, 20],
			r = 0;

        var __t0 = __iterator(a);

        while (__t0.hasNext()) {
            (function() {
                var x = __t0.next();
                process.nextTick(function() {
                    r += x;
                });
            }).call(this);
        }

        process.nextTick(function() {
			r.should.equal(30);
			done();
		});
    })

	it('works with return statement', function() {
        var a = [10, 20];

        function f() {
			for ( var __t1 in a ) {
                try {
                    throw __t1;
                } catch (i) {
                    return a[i];
                }
            }
		}

        f().should.equal(10);
    })

});